/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:27 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.veh.claim.serviceimpl;

import static java.util.stream.Collectors.collectingAndThen;
import static java.util.stream.Collectors.toCollection;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.TreeSet;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.maan.veh.claim.dto.Menu;
import com.maan.veh.claim.entity.LoginMaster;
import com.maan.veh.claim.entity.MenuMaster;
import com.maan.veh.claim.repository.LoginMasterRepository;
import com.maan.veh.claim.request.MenuListReq;
import com.maan.veh.claim.service.LoginDetailsService;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Expression;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;

/**
* <h2>LoginMasterServiceimpl</h2>
*/
@Service
@Transactional
public class LoginDetailsServiceImpl implements LoginDetailsService {

	@Autowired
	private LoginMasterRepository loginRepo;
	
	@PersistenceContext
	
	private EntityManager em;

private Logger log=LogManager.getLogger(LoginDetailsServiceImpl.class);

 
	@Override
	public List<Menu> getMenuList( MenuListReq req){
		List<Menu> menusret=new ArrayList<Menu>();
		String company_id=StringUtils.isBlank(req.getInsuranceId()) ? "99999" : req.getInsuranceId() ;
		String product_id=StringUtils.isBlank(req.getProductId()) ? "99999" : req.getProductId() ;
		try {
			LoginMaster login =loginRepo.findByLoginId(req.getLoginId());
			// Menu Ids
			List<String> asList =  new ArrayList<String>();
			 List<MenuMaster> findBymenuList = new ArrayList<>();
			  if(StringUtils.isNotBlank(login.getMenuIds()) ) {

				  asList = Arrays.asList(login.getMenuIds().split(",") );
				 
			  }
			// Get Menus 	  
			if(req.getSubUserType().equalsIgnoreCase("surveyor")  )	  {
				List<MenuMaster> usermenuList = getMenuListCriteria(asList , req.getSubUserType(),company_id,product_id  );
				findBymenuList.addAll(usermenuList);
			} /*
				 * else if(req.getSubUserType().equalsIgnoreCase("high") ) { List<MenuMaster>
				 * adminmenuList = getMenuListCriteria(asList , "admin",company_id,product_id );
				 * findBymenuList.addAll(adminmenuList); } else
				 * if(req.getSubUserType().equalsIgnoreCase("low") ) { List<MenuMaster>
				 * usermenuList = getMenuListCriteria(asList ,
				 * req.getUserType(),company_id,product_id );
				 * findBymenuList.addAll(usermenuList); } else
				 * if(req.getSubUserType().equalsIgnoreCase("SuperAdmin") ) { List<MenuMaster>
				 * usermenuList = getMenuListCriteria(asList ,
				 * "SuperAdmin",company_id,product_id ); findBymenuList.addAll(usermenuList); }
				 * else { List<MenuMaster> usermenuList = getMenuListCriteria(asList ,
				 * req.getUserType() ,company_id,product_id );
				 * findBymenuList.addAll(usermenuList); }
				 */
			List<MenuMaster> unique = findBymenuList.stream()
                    .collect(collectingAndThen(toCollection(() -> new TreeSet<>(Comparator.comparingInt((MenuMaster::getMenuId)))),
                                               ArrayList::new));

				List<Menu> menus=new ArrayList<Menu>();
				for (MenuMaster menuMaster : unique) {
					Menu m = Menu.builder().title(menuMaster.getMenuName()).titleLocal(menuMaster.getMenuNameLocal()).link(menuMaster.getMenuUrl()).id(menuMaster.getMenuId().toString()).parent(menuMaster.getParentMenu())
							.icon(menuMaster.getMenuLogo()).orderby(menuMaster.getDisplayOrder()==null?0:menuMaster.getDisplayOrder().longValue()).build();
					menus.add(m);
				}
				 List<Menu> collect = menus.stream().filter(i-> "99999".equals(i.getParent())).collect(Collectors.toList());
				log.info("collect"+collect);
				 for (Menu menu : collect) {
					 Menu m = menu;
					 m.setChildren(menus.stream().filter(i -> (!"99999".equals(i.getParent()) && menu.getId().equals(i.getParent()))).collect(Collectors.toList()));
					if(m.getChildren().size()>0) {
						menusret.add(m);	
					} else {
						m.setChildren(null);
						menusret.add(m);
					}
					 
				}
				 menusret.sort(Comparator.comparing(Menu :: getOrderby));
				
				 
			return menusret;
		}catch(Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage() );
			return null;
		}
	} 
	
	
	public List<MenuMaster> getMenuListCriteria( List<String> menuids, String usertype ,String company_id ,String product_id ){
		List<MenuMaster> menuList = new ArrayList<MenuMaster>();
		try {
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<MenuMaster> query = cb.createQuery(MenuMaster.class);
			Root<MenuMaster> m = query.from(MenuMaster.class);

			//In 
			Expression<String>e0=m.get("menuId");
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(m.get("menuId")));
			
			Predicate p1 = cb.equal(m.get("status"), "Y");
			
			Predicate p3 =  cb.like(m.get("usertype"), "%" + usertype + "%" );
			
			Predicate p5 = cb.or(
				    cb.equal(m.get("companyId"), company_id),
				    cb.equal(m.get("companyId"), "99999")
				);
			
			Predicate p6 = cb.or(
				    cb.equal(m.get("productId"), product_id),
				    cb.equal(m.get("productId"), "99999")
				);
			if(menuids.size()>0) {
				Predicate p2 = e0.in(menuids).not();

					query.select(m ).where(p1,p2,p3,p5,p6).orderBy(orderList) ;

				
			} else {

					query.select(m ).where(p1,p3,p5,p6).orderBy(orderList) ;

			}

			TypedQuery<MenuMaster> result = em.createQuery(query);
			menuList = result.getResultList();
			
		}catch(Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage() );
			return null ;
		}
		return menuList;
	}


}


